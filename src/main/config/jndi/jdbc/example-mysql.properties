#
# Filename:  mysql-db1.properties
# JNDI name: jdbc/mysql-db1
#
# MySQL datasource with a connection pool

# Base configuration
# ------------------

# the JNDI resource type (mandatory)
type=javax.sql.DataSource

# the fully qualified Java class name of the JDBC driver to be used (mandatory)
driverClassName=com.mysql.jdbc.Driver

# the connection URL to be passed to our JDBC driver to establish a connection (mandatory)
url=jdbc:mysql://localhost:3306

# the connection username to be passed to our JDBC driver to establish a connection (optional, database-dependent)
username=dbuser

# the connection password to be passed to our JDBC driver to establish a connection (optional, database-dependent)
password=changeit

# Extendend configuration
# -----------------------

# the connection properties that will be sent to our JDBC driver when establishing new connections.
# Format of the string must be [propertyName=property;]* 
#connectionProperties=

# the default auto-commit state of connections created by this pool. If not set then the setAutoCommit 
# method will not be called
#defaultAutoCommit=

# the default read-only state of connections created by this pool. If not set then the setReadOnly
# method will not be called 
#defaultReadOnly=

# the default TransactionIsolation state of connections created by this pool. One of the following:
# NONE, READ_COMMITTED, READ_UNCOMMITTED, REPEATABLE_READ, SERIALIZABLE
#defaultTransactionIsolation=

# the default catalog of connections created by this pool
#defaultCatalog=

#
# Pool configuration 
#

# the initial number of connections that are created when the pool is started (default: 0)
initialSize=0

# the maximum number of active connections that can be allocated from this pool at the same time,
# or negative for no limit (default: 8)
maxTotal=4

# the maximum number of connections that can remain idle in the pool, without extra ones being released, 
# or negative for no limit (default: 8)
maxIdle=1

# the minimum number of connections that can remain idle in the pool, without extra ones being created, 
# or zero to create none (default is 0)
minIdle=0

# the maximum number of milliseconds that the pool will wait (when there are no available connections)
# for a connection to be returned before throwing an exception, or -1 to wait indefinitely (default: indefinitely)
maxWaitMillis=1000

# the SQL query that will be used to validate connections from this pool before returning them to the caller.
# If specified, this query MUST be an SQL SELECT statement that returns at least one row
#validationQuery=

# the indication of whether objects will be validated after creation. If the object fails to validate, 
# the borrow attempt that triggered the object creation will fail (default: false)
#testOnCreate=false

# the indication of whether objects will be validated before being borrowed from the pool. If the object
# fails to validate, it will be dropped from the pool, and we will attempt to borrow another (default: true)
#testOnBorrow=true

# the indication of whether objects will be validated before being returned to the pool (default: false)
#testOnReturn=false

# the indication of whether objects will be validated by the idle object evictor (if any). If an object fails
# to validate, it will be dropped from the pool (default: false)
#testWhileIdle=false

# the number of milliseconds to sleep between runs of the idle object evictor thread. When non-positive, no
# idle object evictor thread will be run (default: -1)
#timeBetweenEvictionRunsMillis=-1

# the number of objects to examine during each run of the idle object evictor thread (default: 3) 
#numTestsPerEvictionRun=3

# the minimum amount of time an object may sit idle in the pool before it is eligable for eviction by the idle
# object evictor (default: 1000 * 60 * 30 = 1800000)
#minEvictableIdleTimeMillis=1800000

# enable prepared statement pooling for this pool (default: false)
#poolPreparedStatements=false

# the maximum number of open statements that can be allocated from the statement pool at the same time,
# or negative for no limit.
#maxOpenPreparedStatements=-1

# flag to remove abandoned connections if they exceed the removeAbandonedTimout (default: false)
#removeAbandoned=false

# timeout in seconds before an abandoned connection can be removed (default: 300)
#removeAbandonedTimeout=300

# flag to log stack traces for application code which abandoned a Statement or Connection (default: false)
#logAbandoned=false